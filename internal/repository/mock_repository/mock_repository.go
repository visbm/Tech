// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "avito-tech/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAccount is a mock of Account interface.
type MockAccount struct {
	ctrl     *gomock.Controller
	recorder *MockAccountMockRecorder
}

// MockAccountMockRecorder is the mock recorder for MockAccount.
type MockAccountMockRecorder struct {
	mock *MockAccount
}

// NewMockAccount creates a new mock instance.
func NewMockAccount(ctrl *gomock.Controller) *MockAccount {
	mock := &MockAccount{ctrl: ctrl}
	mock.recorder = &MockAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccount) EXPECT() *MockAccountMockRecorder {
	return m.recorder
}

// ChangeBalance mocks base method.
func (m *MockAccount) ChangeBalance(acc *models.AccountDebit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeBalance", acc)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeBalance indicates an expected call of ChangeBalance.
func (mr *MockAccountMockRecorder) ChangeBalance(acc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBalance", reflect.TypeOf((*MockAccount)(nil).ChangeBalance), acc)
}

// GetAll mocks base method.
func (m *MockAccount) GetAll() ([]models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAccountMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAccount)(nil).GetAll))
}

// GetBalanceByID mocks base method.
func (m *MockAccount) GetBalanceByID(id int) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceByID", id)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceByID indicates an expected call of GetBalanceByID.
func (mr *MockAccountMockRecorder) GetBalanceByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceByID", reflect.TypeOf((*MockAccount)(nil).GetBalanceByID), id)
}

// MoneyTransaction mocks base method.
func (m *MockAccount) MoneyTransaction(transaction *models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoneyTransaction", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoneyTransaction indicates an expected call of MoneyTransaction.
func (mr *MockAccountMockRecorder) MoneyTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoneyTransaction", reflect.TypeOf((*MockAccount)(nil).MoneyTransaction), transaction)
}

// MockTransactionHistory is a mock of TransactionHistory interface.
type MockTransactionHistory struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionHistoryMockRecorder
}

// MockTransactionHistoryMockRecorder is the mock recorder for MockTransactionHistory.
type MockTransactionHistoryMockRecorder struct {
	mock *MockTransactionHistory
}

// NewMockTransactionHistory creates a new mock instance.
func NewMockTransactionHistory(ctrl *gomock.Controller) *MockTransactionHistory {
	mock := &MockTransactionHistory{ctrl: ctrl}
	mock.recorder = &MockTransactionHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionHistory) EXPECT() *MockTransactionHistoryMockRecorder {
	return m.recorder
}

// GetByAccountID mocks base method.
func (m *MockTransactionHistory) GetByAccountID(req *models.TransactionHistoryReq) ([]models.TransactionHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAccountID", req)
	ret0, _ := ret[0].([]models.TransactionHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAccountID indicates an expected call of GetByAccountID.
func (mr *MockTransactionHistoryMockRecorder) GetByAccountID(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAccountID", reflect.TypeOf((*MockTransactionHistory)(nil).GetByAccountID), req)
}
